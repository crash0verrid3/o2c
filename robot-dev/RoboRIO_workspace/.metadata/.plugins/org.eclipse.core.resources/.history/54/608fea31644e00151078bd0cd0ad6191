#include <Navigator.h>

NAVIGATOR :: NAVIGATOR() :	INS_semaphore(0)

	{
	initcnt = 0;
	pReadSensors = new Notifier(NAVIGATOR::CallReadSensors,this);
	pINSupdate = new Notifier(NAVIGATOR::CallUpdateINS,this);
	MyIMU = new I2C(I2C::kOnboard, BNO055_ADDRESS_A);
	INS_Calibrating = false;
	Navigation_Data_Queue_Depth = 0;
	Navigation_Data_Frame_Size = sizeof(Navigation_Data_Queue) / NAVIGATION_QUEUE_SIZE;
	Navigation_Data_Queue_Top = Navigation_Data_Queue_Bottom = 0;
	NavClockTime = 0;
	XtipAngle = YtipAngle = 0;
	XspeedCenter = YspeedCenter = 0;
	temperature = 0;
	NavElapsedTime = NAVtemperature = NAVx_accel = NAVy_accel = NAVz_accel = NAVx_gyro = NAVy_gyro = NAVz_gyro = 0;
	NavLoopCnt = 0;
	SampleCount = 1;
	SampleElapsedTime = 0;
	SampleRunTime = 0;
	GyroHeading = 0;	// actually want to read from SmartDashboard 'cause we might want to start the robot facing otherwise
	RobotDirection = 0;
	noisyGyrocnt = 0;
	noisyAccelcnt = 0;
	dataNotRdyCnt = 0;
	Sensitivity_Offset = 0;		// we'll use this later to adjust sensitivity as a function of temperature (it does matter)
	gyro_frame_index = 0;
	accel_frame_index = 6;
	GyroCenter_H = GyroCenter_R = GyroCenter_P = 0;
	}


void NAVIGATOR :: InitMyIMU()
	{
	// Configure and initialize the gyro
	uint8_t		chipID = 0;

	memset(IMU_rcv_buff, 0, sizeof(IMU_rcv_buff));
	Wait(2);
	if ((! MyIMU->AddressOnly()) && (! MyIMU->Write((uint8_t) BNO055_PAGE_ID_ADDR, 0)))
		{
		initcnt++;			// = 1
		for (int i=0; (i<10) && (chipID != BNO055_ID); i++)	// wait up to 1 sec for the IMU Chip to boot up, checking every 1/10 sec
			{
			MyIMU->Read(BNO055_CHIP_ID_ADDR, 1, &chipID);	// read the ChipID
			pMyRobotState->IMU_ChipID = ((int) chipID) & 0xFF;
			Wait(0.1);
			}
		if (chipID == BNO055_ID)							// good news!  The IMU has booted and is responsive, so begin Configuration
			{
			initcnt++;			// = 2
			if (! MyIMU->Write((uint8_t) BNO055_OPR_MODE_ADDR, (uint8_t) BNO055_OPERATION_MODE_CONFIG))
				{
				initcnt++;			// = 3
				Wait(0.03);										// wait 30 msec for the IMU Chip enter Config mode (Chip Specs says 19ms)
				if ((! MyIMU->Write((uint8_t) BNO055_PWR_MODE_ADDR, (uint8_t) BNO055_POWER_MODE_NORMAL))
 						&& (! MyIMU->Write((uint8_t) BNO055_AXIS_MAP_ZYX_ADDR, (uint8_t) BNO055_AXIS_MAP_XYZ))
						&& (! MyIMU->Write((uint8_t) BNO055_AXIS_SIGN_XYZ_ADDR, (uint8_t) BNO055_AXIS_SIGN_PPP))
						&& (! MyIMU->Write((uint8_t) BNO055_GYRO_OFFSET_X_LSB_ADDR, (uint8_t) (pMyRobotState->IMU_Gyro_X_Offset & 0xFF)))
						&& (! MyIMU->Write((uint8_t) BNO055_GYRO_OFFSET_X_MSB_ADDR, (uint8_t) ((pMyRobotState->IMU_Gyro_X_Offset >> 8) & 0xFF)))
						&& (! MyIMU->Write((uint8_t) BNO055_GYRO_OFFSET_Y_LSB_ADDR, (uint8_t) (pMyRobotState->IMU_Gyro_Y_Offset & 0xFF)))
						&& (! MyIMU->Write((uint8_t) BNO055_GYRO_OFFSET_Y_MSB_ADDR, (uint8_t) ((pMyRobotState->IMU_Gyro_Y_Offset >> 8) & 0xFF)))
						&& (! MyIMU->Write((uint8_t) BNO055_GYRO_OFFSET_Z_LSB_ADDR, (uint8_t) (pMyRobotState->IMU_Gyro_Z_Offset & 0xFF)))
						&& (! MyIMU->Write((uint8_t) BNO055_GYRO_OFFSET_Z_MSB_ADDR, (uint8_t) ((pMyRobotState->IMU_Gyro_Z_Offset >> 8) & 0xFF)))
						&& (! MyIMU->Write((uint8_t) BNO055_UNIT_SEL_ADDR, (uint8_t) (BNO055_ORIENTATION_ANDROID |
								BNO055_TEMP_CELSIUS | BNO055_EULER_RADIANS | BNO055_ANGULAR_RATE_RPS | BNO055_ACCEL_MPS2))))
/*

 */					{
					initcnt++;			// = 4
					Wait(0.01);
//					if (! MyIMU->Write((uint8_t) BNO055_SYS_TRIGGER_ADDR, (uint8_t) (BNO55_TRIGGER_EXTCLK | BNO55_TRIGGER_RSTSYS)))
					if (! MyIMU->Write((uint8_t) BNO055_SYS_TRIGGER_ADDR, (uint8_t) BNO55_TRIGGER_EXTCLK))
						{
						initcnt++;			// = 5
						Wait(2);
						chipID = 0;
						for (int i=0; (i<10) && (chipID != BNO055_ID); i++)	// wait up to 1 sec for the IMU Chip to boot up, checking every 1/10 sec
							{
							MyIMU->Read(BNO055_CHIP_ID_ADDR, 1, &chipID);	// read the ChipID
							Wait(0.1);
							}
						if (chipID == BNO055_ID)							// good news!  The IMU has booted and is responsive, so begin Configuration
							{
							initcnt++;			// = 6
							/*
							 * We might need to loop here until the Calibration status is non-zero
							 * We waited 10 seconds and the Calibration Status remained zero
							 */
//							for (int i=0; i<1000 && IMU_rcv_buff[0] == 0; i++)
								{
								MyIMU->Read(BNO055_CALIB_STAT_ADDR, BNO055_STATUS_CNT, IMU_rcv_buff);
								Wait(0.01);										// wait 10 msec for the IMU Chip enter Config mode (Chip Specs says 19ms)
								}
							initcnt++;			// = 7
							if ((! MyIMU->Write((uint8_t) BNO055_OPR_MODE_ADDR, (uint8_t) BNO055_OPERATION_MODE_IMU)))
//									&& (! MyIMU->Write((uint8_t) BNO055_SYS_TRIGGER_ADDR, (uint8_t) BNO55_TRIGGER_EXTCLK)))
								{
								initcnt += 100;			// = 107
								Wait(0.01);										// wait 10 msec for the IMU Chip enter Operational mode (Chip Specs says 7ms)
								}
							}
						}
					}
				}
			}
		}
	pMyRobotState->IMU_ChipID = ((int) chipID) & 0xFF;
	pMyRobotState->IMU_CalStat = ((int) IMU_rcv_buff[0]) & 0xFF;
	pMyRobotState->IMU_SelfTest = ((int) IMU_rcv_buff[1]) & 0xFF;
	pMyRobotState->IMU_IntrStat = ((int) IMU_rcv_buff[2]) & 0xFF;
	pMyRobotState->IMU_ClockStat = ((int) IMU_rcv_buff[3]) & 0xFF;
	pMyRobotState->IMU_SystemStat = ((int) IMU_rcv_buff[4]) & 0xFF;
	pMyRobotState->IMU_SystemError = ((int) IMU_rcv_buff[5]) & 0xFF;
	}


void NAVIGATOR :: SetStartingPosition()
	{
	pMyRobotState->Robot_Position_X = pMyRobotState->Auto_Start_X;
	pMyRobotState->Robot_Position_Y = pMyRobotState->Auto_Start_Y;
	pMyRobotState->Robot_Heading = pMyRobotState->Auto_Start_Heading;
	pMyRobotState->Drivetrain_Heading = pMyRobotState->Robot_Heading;
	pMyRobotState->Robot_Direction = 0;
	pMyRobotState->Robot_Speed = 0;
	pMyRobotState->Nav_Robot_Lost = false;
	pMyRobotState->Nav_Gyro_Tilt = false;
	}

void NAVIGATOR :: Init(RobotStateBuffer *pRobotState, INPUT *pInput)
	{
	pMyRobotState = pRobotState;
	pMyInput = pInput;
	SetStartingPosition();
	NavTimer.Reset();
	initcnt = 0;
	InitMyIMU();
	INS_Calibrating = true;
	ReadThermostat();
	ReadEuler();
	ReadGyro();
	ReadAccel();
	SampleCount = 1;		// Throw away the first samples.  They are totally bogus/random
	ReadThermostat();
	ReadEuler();
	ReadGyro();
	ReadAccel();
	SampleCount = 0;		// Use the second set of samples to preset the center positions.
	NavTimer.Start();
	for (int i=1; (i < 200) && (fabs(NavTimer.Get()) < .000001); i++) Wait (.000001);  // wait for timer to start running
	INS_semaphore = initializeMutexRecursive();
	pReadSensors->StartPeriodic(SAMPLEPERIOD);	// schedule periodic sampling of Gyro and Accel data
	pINSupdate->StartPeriodic(INSUPDATEPERIOD);	// schedule periodic updates of the Robot position, orientation, speed and direction of travel
	pMyRobotState->Navigator_Init = initcnt;
	}



void NAVIGATOR :: ReadThermostat()
	{
	int8_t	temp;
	memset(IMU_rcv_buff, 0, sizeof(IMU_rcv_buff));
	MyIMU->Read(BNO055_TEMP_ADDR, 1, IMU_rcv_buff);
	pMyRobotState->Nav_Temp = (temp = (uint8_t) IMU_rcv_buff[0]);
	NAVtemperature = pMyRobotState->Nav_Temp - pMyRobotState->Nav_IMU_Temp_Center;
	/*
	 * Rather than automagically detecting the "Normal" (Center) value of the temperature sensor, we want to
	 * hard-code the Center value that corresponds to zero compensation from the prescribed sensor sensivities.
	 * Per the book, that is 25 degrees Celsius.
	 */
	}

void NAVIGATOR :: ReadEuler()
	{
	int16_t	Euler_Heading, Euler_Roll, Euler_Pitch;

	memset(IMU_rcv_buff, 0, sizeof(IMU_rcv_buff));
	MyIMU->Read(BNO055_EULER_H_LSB_ADDR, GYRO_READ_CNT, IMU_rcv_buff);
	pMyRobotState->Nav_Gyro_Heading = ((Euler_Heading = ((uint16_t) IMU_rcv_buff[1] << 8) | ((uint16_t) IMU_rcv_buff[0])) / GYRO_RADIANS) - GyroCenter_H;
	pMyRobotState->Nav_Gyro_Roll = ((Euler_Roll = ((uint16_t) IMU_rcv_buff[3] << 8) | ((uint16_t) IMU_rcv_buff[2])) / GYRO_RADIANS) - GyroCenter_R;
	pMyRobotState->Nav_Gyro_Pitch = ((Euler_Pitch = ((uint16_t) IMU_rcv_buff[5] << 8) | ((uint16_t) IMU_rcv_buff[4])) / GYRO_RADIANS) - GyroCenter_P;

	pMyRobotState->Nav_Gyro_Heading += (pMyRobotState->Nav_Gyro_Heading < 0.0) ? TWO_PI : (pMyRobotState->Nav_Gyro_Heading > TWO_PI) ? TWO_PI * -1 : 0;
	pMyRobotState->Nav_Gyro_Roll += (pMyRobotState->Nav_Gyro_Roll < 0.0) ? TWO_PI : (pMyRobotState->Nav_Gyro_Roll > TWO_PI) ? TWO_PI * -1 : 0;
	pMyRobotState->Nav_Gyro_Pitch += (pMyRobotState->Nav_Gyro_Pitch < 0.0) ? TWO_PI : (pMyRobotState->Nav_Gyro_Pitch > TWO_PI) ? TWO_PI * -1 : 0;

	if (INS_Calibrating)
		{
		/*
		 * Not clear at this time whether moving/repositioning the robot during the calibration sequence should cause
		 * the Center values to be updated.  If you do not re-center, the movement will register as drift.  If you do
		 * re-center, drift will always be zero because the center point will be updated to remove any drift.
		 * For now, I think we need to re-center and if the gyro tends to drift, we will need to detect that from the
		 * gyro rate values.
		 */
		GyroCenter_H += pMyRobotState->Nav_Gyro_Heading;
		GyroCenter_R += pMyRobotState->Nav_Gyro_Roll;
		GyroCenter_P += pMyRobotState->Nav_Gyro_Pitch;
		GyroCenter_H += (GyroCenter_H < 0.0) ? TWO_PI : (GyroCenter_H > TWO_PI) ? TWO_PI * -1 : 0;
		GyroCenter_R += (GyroCenter_R < 0.0) ? TWO_PI : (GyroCenter_R > TWO_PI) ? TWO_PI * -1 : 0;
		GyroCenter_P += (GyroCenter_P < 0.0) ? TWO_PI : (GyroCenter_P > TWO_PI) ? TWO_PI * -1 : 0;
		pMyRobotState->Nav_Drift_Heading = GyroCenter_H;
		pMyRobotState->Nav_Drift_Roll = GyroCenter_R;
		pMyRobotState->Nav_Drift_Pitch = GyroCenter_P;

		// set the drift value to the average of the Euler value during calibration
		/*
		 * Note:  There is a potential flaw if any of the Euler values exceeds the range for the axis during calibration
		 * 	If the Heading range (0 to TWO_PI) is exceeded, the heading drift calculation will be way too small.
		 * 	If the Pitch range (-PI to +PI degrees) is exceeded, the pitch drift calculation will reverse direction.
		 * 	If the Roll range (-HALF_PI to +HALF_PI degrees) is exceeded, there will be a dramatic shift in drift calculations across all axis.
		 *
		 * 	So, if we use these data values and we find it necessary to measure and correct for significant drift values,
		 * 	we will need a different algorithm.  We will need to measure the difference in Euler values between cycles and
		 * 	detect for axis shifting when any range is exceeded.
		 *
		 * 	For now, we are just going to measure the values and see what they look like under varying environmental influences.
		 */
//		pMyRobotState->Nav_Drift_Heading = (double) pMyRobotState->Nav_Gyro_Heading / (double) SampleCount;
//		pMyRobotState->Nav_Drift_Roll = (double) pMyRobotState->Nav_Gyro_Roll / (double) SampleCount;
//		pMyRobotState->Nav_Drift_Pitch = (double) pMyRobotState->Nav_Gyro_Pitch / (double) SampleCount;
		}
//	pMyRobotState->Nav_Gyro_Heading = (double) Euler_Heading - (pMyRobotState->Nav_Drift_Heading * (double) SampleCount);
//	pMyRobotState->Nav_Gyro_Roll = (double) Euler_Roll - (pMyRobotState->Nav_Drift_Roll * (double) SampleCount);
//	pMyRobotState->Nav_Gyro_Pitch = (double) Euler_Pitch - (pMyRobotState->Nav_Drift_Pitch * (double) SampleCount);
}

void NAVIGATOR :: ReadGyro()
	{
	int16_t	Xrate, Yrate, Zrate;

	memset(IMU_rcv_buff, 0, sizeof(IMU_rcv_buff));
	MyIMU->Read(BNO055_GYRO_DATA_X_LSB_ADDR, GYRO_READ_CNT, IMU_rcv_buff);
 	pMyRobotState->Nav_Gyro_X_Raw = (Xrate = ((uint16_t) IMU_rcv_buff[1] << 8) | ((uint16_t) IMU_rcv_buff[0])) - pMyRobotState->Nav_Gyro_X_Center;
	pMyRobotState->Nav_Gyro_Y_Raw = (Yrate = ((uint16_t) IMU_rcv_buff[3] << 8) | ((uint16_t) IMU_rcv_buff[2])) - pMyRobotState->Nav_Gyro_Y_Center;
	pMyRobotState->Nav_Gyro_Z_Raw = (Zrate = ((uint16_t) IMU_rcv_buff[5] << 8) | ((uint16_t) IMU_rcv_buff[4])) - pMyRobotState->Nav_Gyro_Z_Center;

	// Squelch noise
	pMyRobotState->Nav_Gyro_X_Raw *= (fabs(pMyRobotState->Nav_Gyro_X_Raw) < pMyRobotState->Nav_Gyro_Noise_Base) ? pMyRobotState->Nav_Gyro_Squelch : 1;
	pMyRobotState->Nav_Gyro_Y_Raw *= (fabs(pMyRobotState->Nav_Gyro_Y_Raw) < pMyRobotState->Nav_Gyro_Noise_Base) ? pMyRobotState->Nav_Gyro_Squelch : 1;
	pMyRobotState->Nav_Gyro_Z_Raw *= (fabs(pMyRobotState->Nav_Gyro_Z_Raw) < pMyRobotState->Nav_Gyro_Noise_Base) ? pMyRobotState->Nav_Gyro_Squelch : 1;

	if (INS_Calibrating)
		{
		if (fmax(fmax(fabs(pMyRobotState->Nav_Gyro_X_Raw),fabs(pMyRobotState->Nav_Gyro_Y_Raw)),fabs(pMyRobotState->Nav_Gyro_Z_Raw)) > pMyRobotState->Nav_Gyro_Noise_Limit)
			{
			//	The robot got moved during the calibration sequence.
			pMyRobotState->Nav_Gyro_Noisy_Count++;
			}
		// set the center value to the average of all raw values sampled during calibration
		pMyRobotState->Nav_Gyro_X_Center = ((pMyRobotState->Nav_Gyro_X_Center * (double) (SampleCount - 1)) + pMyRobotState->Nav_Gyro_X_Raw) / (double) SampleCount;
		pMyRobotState->Nav_Gyro_Y_Center = ((pMyRobotState->Nav_Gyro_Y_Center * (double) (SampleCount - 1)) + pMyRobotState->Nav_Gyro_Y_Raw) / (double) SampleCount;
		pMyRobotState->Nav_Gyro_Z_Center = ((pMyRobotState->Nav_Gyro_Z_Center * (double) (SampleCount - 1)) + pMyRobotState->Nav_Gyro_Z_Raw) / (double) SampleCount;
		}

	// Scale for rate sensitivity
 	pMyRobotState->Nav_Gyro_X_Raw /= pMyRobotState->Nav_Gyro_X_Sensitivity;
	pMyRobotState->Nav_Gyro_Y_Raw /= pMyRobotState->Nav_Gyro_Y_Sensitivity;
	pMyRobotState->Nav_Gyro_Z_Raw /= (pMyRobotState->Nav_Gyro_Z_Raw >0) ? pMyRobotState->Nav_Gyro_Z_CW_Sensitivity : pMyRobotState->Nav_Gyro_Z_CCW_Sensitivity;

	// Now compensate for the temperature
	// Typical BNO055 gyroscope rate sensivity to temperature deviation is +/-0.03% per degree Celsius
	pMyRobotState->Nav_Gyro_X_Raw *= (1.0 + (NAVtemperature * GYRO_THERMO_SENSITIVITY));
	pMyRobotState->Nav_Gyro_Y_Raw *= (1.0 + (NAVtemperature * GYRO_THERMO_SENSITIVITY));
	pMyRobotState->Nav_Gyro_Z_Raw *= (1.0 + (NAVtemperature * GYRO_THERMO_SENSITIVITY));

	// Finally, compensate for non-linear spin sensitivity
	/*
	 * Sometimes gyro mems devices do not produce the same absolute signal level for the same rate of spin in opposite directions.
	 * Also, they do not always produce the same change in signal level for equal differences in spin rate at various spin rates.
	 */
	}


void NAVIGATOR :: ReadAccel()
	{
	int16_t	XGs, YGs, ZGs;

	memset(IMU_rcv_buff, 0, sizeof(IMU_rcv_buff));
	MyIMU->Read(BNO055_LINEAR_ACCEL_DATA_X_LSB_ADDR, GYRO_READ_CNT, IMU_rcv_buff);
	XGs = ((uint16_t) IMU_rcv_buff[1] << 8) | ((uint16_t) IMU_rcv_buff[0]);
	YGs = ((uint16_t) IMU_rcv_buff[3] << 8) | ((uint16_t) IMU_rcv_buff[2]);
	ZGs = ((uint16_t) IMU_rcv_buff[5] << 8) | ((uint16_t) IMU_rcv_buff[4]);

	pMyRobotState->Nav_Acc_X_Raw = (XGs = ((uint16_t) IMU_rcv_buff[1] << 8) | ((uint16_t) IMU_rcv_buff[0])) - pMyRobotState->Nav_Acc_X_Center;
	pMyRobotState->Nav_Acc_Y_Raw = (YGs = ((uint16_t) IMU_rcv_buff[3] << 8) | ((uint16_t) IMU_rcv_buff[2])) - pMyRobotState->Nav_Acc_Y_Center;
	pMyRobotState->Nav_Acc_Z_Raw = (ZGs = ((uint16_t) IMU_rcv_buff[5] << 8) | ((uint16_t) IMU_rcv_buff[4])) - pMyRobotState->Nav_Acc_Z_Center;

	// Squelch noise
	pMyRobotState->Nav_Acc_X_Raw *= (fabs(pMyRobotState->Nav_Acc_X_Raw) < pMyRobotState->Nav_Acc_Noise_Base) ? pMyRobotState->Nav_Acc_Squelch : 1;
	pMyRobotState->Nav_Acc_Y_Raw *= (fabs(pMyRobotState->Nav_Acc_Y_Raw) < pMyRobotState->Nav_Acc_Noise_Base) ? pMyRobotState->Nav_Acc_Squelch : 1;
	pMyRobotState->Nav_Acc_Z_Raw *= (fabs(pMyRobotState->Nav_Acc_Z_Raw) < pMyRobotState->Nav_Acc_Noise_Base) ? pMyRobotState->Nav_Acc_Squelch : 1;

	if (INS_Calibrating)
		{
		if (fmax(fmax(fabs(XGs),fabs(YGs)),fabs(ZGs)) > pMyRobotState->Nav_Acc_Noise_Limit)
			{
			//	The robot got moved during the calibration sequence.
			noisyAccelcnt++;
			}
		// set the center value to the average of all raw values sampled during calibration
		pMyRobotState->Nav_Acc_X_Center = ((pMyRobotState->Nav_Acc_X_Center * (double) (SampleCount - 1)) + pMyRobotState->Nav_Acc_X_Raw) / (double) SampleCount;
		pMyRobotState->Nav_Acc_Y_Center = ((pMyRobotState->Nav_Acc_Y_Center * (double) (SampleCount - 1)) + pMyRobotState->Nav_Acc_Y_Raw) / (double) SampleCount;
		pMyRobotState->Nav_Acc_Z_Center = ((pMyRobotState->Nav_Acc_Z_Center * (double) (SampleCount - 1)) + pMyRobotState->Nav_Acc_Z_Raw) / (double) SampleCount;
		}

	// Scale for rate sensitivity
 	pMyRobotState->Nav_Acc_X_Raw /= ACCEL_MPS2;
	pMyRobotState->Nav_Acc_Y_Raw /= ACCEL_MPS2;
	pMyRobotState->Nav_Acc_Z_Raw /= ACCEL_MPS2;

	// Now compensate for the temperature
	// Typical BNO055 gyroscope rate sensivity to temperature deviation is +/-0.03% per degree Celsius
	pMyRobotState->Nav_Acc_X_Raw *= (1.0 + (NAVtemperature * ACCEL_THERMO_SENSITIVITY));
	pMyRobotState->Nav_Acc_Y_Raw *= (1.0 + (NAVtemperature * ACCEL_THERMO_SENSITIVITY));
	pMyRobotState->Nav_Acc_Z_Raw *= (1.0 + (NAVtemperature * ACCEL_THERMO_SENSITIVITY));
	}




void NAVIGATOR :: Push_Navigation_Data_Frame(double timestamp, double x_gyro, double y_gyro, double z_gyro, double x_accel, double y_accel, double z_accel)
	{
	int queue_depth;
	CRITICAL_REGION(INS_semaphore)		// we need to reference values that are updated outside of this procedure
		{								// and we don't want those values getting changed while we are referencing them
		queue_depth = (NAVIGATION_QUEUE_SIZE + Navigation_Data_Queue_Top - Navigation_Data_Queue_Bottom) % NAVIGATION_QUEUE_SIZE;
		}
	END_REGION;
	if (queue_depth++ >= NAVIGATION_QUEUE_SIZE - 1)
		{
		// Queue is full and we are lost;
		// If in Autonomous, stop all motors
		pMyRobotState->Nav_Robot_Lost = true;
		}
	else
		{
		if (Navigation_Data_Queue_Top++ >= NAVIGATION_QUEUE_SIZE - 1)
			{
			Synchronized sync(INS_semaphore);	// we are going to update values referenced by other procedure.
			Navigation_Data_Queue_Top = 0;
			}
		Navigation_Data_Queue[Navigation_Data_Queue_Top].timestamp = timestamp;
		Navigation_Data_Queue[Navigation_Data_Queue_Top].gyro_x = x_gyro;
		Navigation_Data_Queue[Navigation_Data_Queue_Top].gyro_y = y_gyro;
		Navigation_Data_Queue[Navigation_Data_Queue_Top].gyro_z = z_gyro;
		Navigation_Data_Queue[Navigation_Data_Queue_Top].accel_x = x_accel;
		Navigation_Data_Queue[Navigation_Data_Queue_Top].accel_y = y_accel;
		Navigation_Data_Queue[Navigation_Data_Queue_Top].accel_z = z_accel;
			{
			Synchronized sync(INS_semaphore);	// we are going to update values referenced by other procedure.
			Navigation_Data_Queue_Depth++;
			}
		}
	}


void NAVIGATOR :: ReadSensors()
	{
	NavClockTime = NavTimer.Get();
	SampleCount++;
	ReadThermostat();
	ReadGyro();
	ReadEuler();
	ReadAccel();
	Push_Navigation_Data_Frame(NavClockTime, pMyRobotState->Nav_Gyro_X_Raw, pMyRobotState->Nav_Gyro_Y_Raw, pMyRobotState->Nav_Gyro_Z_Raw,
											 pMyRobotState->Nav_Acc_X_Raw, pMyRobotState->Nav_Acc_Y_Raw, pMyRobotState->Nav_Acc_Z_Raw);
	SampleRunTime = (NavTimer.Get() - NavClockTime) * 1000;	// exec time of this method in msec
	}


//  schedule this to run independently every 0.1 milliseconds
void NAVIGATOR :: CallReadSensors(void *controller)
	{
	NAVIGATOR *sample_sensors = (NAVIGATOR*) controller;
	sample_sensors->ReadSensors();
	}


void NAVIGATOR :: Zero()
	{
	pMyRobotState->Navigator_Init++;
	if (INS_Calibrating)
		{
		Synchronized sync(INS_semaphore);	// we are going to update values referenced by other procedure.
		INS_Calibrating = false;
		SetStartingPosition();
		pMyRobotState->Nav_Timestamp = NavTimer.Get();
		pMyRobotState->Nav_X_Coord = pMyRobotState->Robot_Position_X;
		pMyRobotState->Nav_Y_Coord = pMyRobotState->Robot_Position_Y;
		pMyRobotState->Nav_X_Speed = 0;
		pMyRobotState->Nav_Y_Speed = 0;
		pMyRobotState->Nav_X_Accel = 0;
		pMyRobotState->Nav_Y_Accel = 0;
		}
	}


bool NAVIGATOR :: Pop_Navigation_Data_Frame()
	{
	int queue_depth;
//	double noiselevelfilter = 25;
	CRITICAL_REGION(INS_semaphore)		// we need to reference values that are updated outside of this procedure
		{								// and we don't want those values getting changed while we are referencing them
		queue_depth = (NAVIGATION_QUEUE_SIZE + Navigation_Data_Queue_Top - Navigation_Data_Queue_Bottom) % NAVIGATION_QUEUE_SIZE;
		}
	END_REGION;
	if (queue_depth <= 1) return false;
	if (Navigation_Data_Queue_Bottom++ >= NAVIGATION_QUEUE_SIZE - 1)
		{
		Synchronized sync(INS_semaphore);	// we are going to update values referenced by other procedure.
		Navigation_Data_Queue_Bottom = 0;
		}
	NavElapsedTime = Navigation_Data_Queue[Navigation_Data_Queue_Bottom].timestamp - pMyRobotState->Nav_Timestamp;
	NAVx_gyro = Navigation_Data_Queue[Navigation_Data_Queue_Bottom].gyro_x;
	NAVy_gyro = Navigation_Data_Queue[Navigation_Data_Queue_Bottom].gyro_y;
	NAVz_gyro = Navigation_Data_Queue[Navigation_Data_Queue_Bottom].gyro_z;
	NAVx_accel = (double) Navigation_Data_Queue[Navigation_Data_Queue_Bottom].accel_x;
	NAVy_accel = (double) Navigation_Data_Queue[Navigation_Data_Queue_Bottom].accel_y;
	NAVz_accel = (double) Navigation_Data_Queue[Navigation_Data_Queue_Bottom].accel_z;
		{
		Synchronized sync(INS_semaphore);	// we are going to update values referenced by other procedure.
		Navigation_Data_Queue_Depth--;
		}
	return true;
	}

void NAVIGATOR :: Compute_Gyro_Orientation()
	{
	pMyRobotState->Robot_Heading += NAVz_gyro * NavElapsedTime;
	pMyRobotState->Robot_Pitch += NAVx_gyro * NavElapsedTime;
	pMyRobotState->Robot_Roll += NAVy_gyro * NavElapsedTime;
	/*
	 * Note:  The Roll axis is only allowed to measure +/- 90 degrees from level.
	 * 		Most of our robotics antics will not likely exceed this limit.
	 * 		However, if we do exceed those limits, then we will have re-orient
	 * 		the Heading and Pitch values to bring the Roll axis within
	 * 		those limits, while leaving the sensor in the same spacial orientation.
	 */
//	if (fabs(pMyRobotState->Robot_Roll) > HALF_PI)
//		{
//		double realign_axis = copysign(180, pMyRobotState->Robot_Roll);
//		pMyRobotState->Robot_Roll -= realign_axis;
//		pMyRobotState->Robot_Pitch -= realign_axis;
//		pMyRobotState->Robot_Heading -= realign_axis;
//		}
	if (fabs(NAVy_gyro) > GYRO_RATELIMIT)
		{
		pMyRobotState->Nav_Gyro_Tilt = true;
		}

	pMyRobotState->Robot_Pitch += pMyRobotState->Robot_Pitch > PI ? -1 * TWO_PI : pMyRobotState->Robot_Pitch <= -1 * PI ? TWO_PI : 0;
	if (fabs(NAVx_gyro) > GYRO_RATELIMIT)
		{
		pMyRobotState->Nav_Gyro_Tilt = true;
		}

	pMyRobotState->Robot_Heading += pMyRobotState->Robot_Heading >= TWO_PI ? -1 * TWO_PI : pMyRobotState->Robot_Heading < -0.0 ? TWO_PI : 0;
	if (fabs(NAVz_gyro) > GYRO_RATELIMIT)
		{
		pMyRobotState->Nav_Gyro_Tilt = true;
		}
	}


void NAVIGATOR :: UpdatePosition()
	{
	// Adjust NAVx_accel and NAVy_accel for Pitch and Roll angles to align with the Robot Orientation (assuming zero axis misalignment)
	double RoAx = (NAVx_accel * cos(pMyRobotState->Robot_Roll)) + (NAVz_accel * sin(pMyRobotState->Robot_Roll));
	double RoAy = (NAVy_accel * cos(pMyRobotState->Robot_Pitch)) + (NAVz_accel * sin(pMyRobotState->Robot_Pitch));

	// Next, rotate the RoAx and RoAy values to align with the Field Orientation (assuming zero axis misalignment)
	pMyRobotState->Nav_X_Accel = (RoAx * cos(pMyRobotState->Robot_Heading)) - (RoAy * sin(pMyRobotState->Robot_Heading));
	pMyRobotState->Nav_Y_Accel = (RoAy * cos(pMyRobotState->Robot_Heading)) - (RoAx * sin(pMyRobotState->Robot_Heading));

	// Update the X and Y position based on prior s = (v * t) + (0.5 * a * t * t)
	double X_dist = (NavElapsedTime * pMyRobotState->Nav_X_Speed) + (0.5 * pMyRobotState->Nav_X_Accel * NavElapsedTime * NavElapsedTime);
	double Y_dist = (NavElapsedTime * pMyRobotState->Nav_Y_Speed) + (0.5 * pMyRobotState->Nav_Y_Accel * NavElapsedTime * NavElapsedTime);
	pMyRobotState->Nav_X_Coord += X_dist;
	pMyRobotState->Nav_Y_Coord += Y_dist;

	// Update the X and Y speed based on s = v + (a * t)
	pMyRobotState->Nav_X_Speed += (pMyRobotState->Nav_X_Accel * NavElapsedTime);
	pMyRobotState->Nav_Y_Speed += (pMyRobotState->Nav_Y_Accel * NavElapsedTime);

	// Update the Robot state values
	pMyRobotState->Robot_Position_X = pMyRobotState->Nav_X_Coord;
	pMyRobotState->Robot_Position_Y = pMyRobotState->Nav_Y_Coord;


	pMyRobotState->Robot_Direction = 90 - (atan2(Y_dist, X_dist) / DEGREES_TO_RADIANS);
	pMyRobotState->Robot_Direction += pMyRobotState->Robot_Direction < 0 ? 360 : 0;
	pMyRobotState->Robot_Speed = pow((pow(pMyRobotState->Nav_X_Speed,2) + pow(pMyRobotState->Nav_Y_Speed,2)),0.5);
	}


// schedule this to run independently every 10 milliseconds
void NAVIGATOR :: UpdateINS()
	{
	while (Pop_Navigation_Data_Frame())
		{
		if (pMyRobotState->Nav_Timestamp > (5 * SAMPLEPERIOD))	// throw out the first 5 samples (~0.2 seconds)
			{										// gives sensors time to stabilize
			Compute_Gyro_Orientation();
			UpdatePosition();
			}
		pMyRobotState->Nav_Timestamp += NavElapsedTime;
		}
	}


//  schedule this to run independently every 10 milliseconds
void NAVIGATOR :: CallUpdateINS(void *controller)
	{
	NAVIGATOR *ins_update = (NAVIGATOR*) controller;
	ins_update->UpdateINS();
	}


