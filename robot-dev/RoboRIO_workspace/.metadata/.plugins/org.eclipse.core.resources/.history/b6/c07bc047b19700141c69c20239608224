#include "Navigator.Analog.h"


NAVIGATOR :: NAVIGATOR() :	MyGyro(GYRO_ANALOGMODULE, GYRO_ANALOGCHANNEL),
							gyro_semaphore(0), accel_semaphore(0), INS_semaphore(0)
	{
	// Problem 1: RF noise on the Gyro channel is interpretted as significant spin signals.
		//	The signal on channel 2 was measured by replacing the gyroscope chip with
		//	a simple circuit like this:  B+ -> 10Kohm -> Ch2 -> 10Kohm -> Gnd
		//	This circuit delivers a B+/2 voltage to the Channel 2 pin.
		//	With this circut, the noise on pin 2 equated to spin signals in the range of
		//	+0.75 deg/sec to -0.55 deg/sec.
	//	Solution 1:	set a constant DriftFactor equal to +0.1 deg/sec (center of the noise range)
		//	to compensate for the noise.
	//	Result 1:	No Joy.
	//	Problem 2:	The noise on the channel is not consistent.  Sometimes it is less pervasive;
		//	sometimes very pervasive.  Between test runs, the DriftFactor may need to vary anywhere
		//	in the range of +0.02 to +0.15 in order to cancel the noise effect.  Typically, it was
		//	close to +0.08.  The small number of samples taken by the GyroInit() function could
		//	not adequately predict the effect of the line noise.
	//	Solution 2:	In the interval between initializing the gyro and starting the match play,
		//	continuously measure the drift signal in order to more accurately adjust for the
		//	noise level during match play.
	//	Result 2:	Partial success.  For most test runs, with 30 sec or more delay before
		//	commencing match play, DriftFactor calculations were generally able to compensate
		//	total gyro drift to within +/-5 degree per minute.
		//	Note some serious flaws with this method:  If anyone moves or bumps the robot
		//	during this calibration time, the DriftFactor calculation must be reset/restarted.
	//	Prolem 3:	The noise on the channel is not constant.  Within a single match run,
		//	the noise level can change significantly.  While the robot is engaged in match play,
		//	it is not possible to differentiate between changes in the noise level and movements
		//	of the robot.  Or is it?
	//	Solution 3:	Plug the gyro into one of the accumulator ports and plug the above simple
		//	circuit into the neighboring accumulator port.  Instantiate a gyro on each of the
		//	ports.  Use the signal on the neighboring port to cancel the drift on the actual
		//	gyro port.
	//	Result 3:	No Joy.  I really thought I had an ingenious solution here.
		//	But alas, the noise registers differently on the two neighboring ports.
		//	Totally bizarre.  Maybe the problem is actually a bad analog card.
	//	Final Solution ?:	Use a combination of all 3 of the above solutions.  After a
		//	little tweaking, I was able to generally keep the gyro drift within 2 degrees
		//	for the first 30 seconds and within 5 degrees for the typcial match time.
	initcnt = 0;
	NavLoopCnt = 0;
	NavElapsedTime = 0;
	GyroRawRate = 0;
	GyroCenter = 0;
	GyroDrift = 0;
	GyroHeading = 0;	// actually want to read from SmartDashboard 'cause we might want to start the robot facing otherwise
	GyroTilt = false;
	RobotHeading = 0;
	noisycnt = 0;
	Gyro_VoltageCenter = 2 * GYRO_CENTERVOLTAGE;
	Calibrated_GyroVoltageCenter = 0;
	}


void NAVIGATOR :: InitMyGyro()
	{
	SmartDashboard::PutNumber("Sensitivity", GYRO_SENSITIVITY * 1000);
	GyroOversample = 0;
	OversampleCount = 0;
	GyroSample = 0;
	MyGyro.SetOversampleBits(GYRO_OVERSAMPLEBITS);
	MyGyro.SetAverageBits(GYRO_SAMPLEAVGBITS);
//	SmartDashboard::PutNumber("GyroOverSample",MyGyro.GetOversampleBits());		// = GYRO_OVERSAMPLEBITS;
//	SmartDashboard::PutNumber("GyroSampleAvg",MyGyro.GetAverageBits());			// = GYRO_SAMPLEAVGBITS;
//	SmartDashboard::PutNumber("NoiseOverSample",Noise.GetOversampleBits());		// = GYRO_OVERSAMPLEBITS;
//	SmartDashboard::PutNumber("NoiseSampleAvg",Noise.GetAverageBits());			// = GYRO_SAMPLEAVGBITS;
	Wait (1);
	
	//	here we will schedule the Gyro Data Collector interrupt service
	//  and the Gryo cage interrupt service
	gyro_semaphore = semMCreate(SEM_Q_PRIORITY);
	SampleGyro = new Notifier(NAVIGATOR::CallOversampleGyro,this);
	SampleGyro->StartPeriodic(SAMPLEPERIOD);
	CalibrateGyro = new Notifier(NAVIGATOR::CallCageGyro,this);
	CalibrateGyro->StartPeriodic(CALIBRATEPERIOD);
	}


void NAVIGATOR :: InitMyAccelerometer()
	{
	accel_semaphore = semMCreate(SEM_Q_PRIORITY);
//	SampleAccel = new Notifier(NAVIGATOR::CallOversampleAccel,this);
//	SampleAccel->StartPeriodic(SAMPLEPERIOD);
//	CalibrateAccel = new Notifier(NAVIGATOR::CallCageAccel,this);
//	CalibrateGyro->StartPeriodic(CALIBRATEPERIOD);
	}


void NAVIGATOR :: Init()
	{
	initcnt++;
	SmartDashboard::PutNumber("NavInit", initcnt);
	NavTimer.Reset();
	InitMyGyro();
	InitMyAccelerometer();
	NavTimer.Start();
	for (i=1; (i < 200) && (fabs(NavTimer.Get()) < .000001); i++) Wait (.000001);  // wait for timer to start running
	NavLoopCnt = 0;
	initcnt++;
	SmartDashboard::PutNumber("NavInit", initcnt);
	//	here we will schedule the Robot Navigation Update interrupt service
	INS_semaphore = semMCreate(SEM_Q_PRIORITY);
	INSupdate = new Notifier(NAVIGATOR::CallCalculate,this);
	INSupdate->StartPeriodic(INSUPDATEPERIOD);
	}


void NAVIGATOR :: OversampleGyro()
	{
	double gvc;
	CRITICAL_REGION(gyro_semaphore)		// we need to reference values that are updated outside of this procedure
		{								// and we don't want those values getting changed while we are referencing them
		gvc = Gyro_VoltageCenter;
		}
	END_REGION;
	GyroOversample += (MyGyro.GetVoltage() - gvc);
	if (OversampleCount++ == GYRO_OVERSAMPLECNT)
		{
		Synchronized sync(gyro_semaphore);	// we are going to update values referenced by other procedure.
		GyroRawRate = GyroOversample / (double) OversampleCount;
		GyroOversample = 0;
		OversampleCount = 0;
		SmartDashboard::PutNumber("RawGyro", GyroRawRate);
		}
	}

//  schedule this to run independently every 0.1 milliseconds
void NAVIGATOR :: CallOversampleGyro(void *controller)
	{
	NAVIGATOR *sample_gyro = (NAVIGATOR*) controller;
	sample_gyro->OversampleGyro();
	}


void NAVIGATOR :: CageGyro()
	{
	// The noise on the gyro analog input is significant.  The more sensitive the gyro, the more impact the noise.
	// So, a gyro that only measures up to 250 degrees/sec rotation will be less affected by the noise level than
	// a gyro that can measure up to 1000 dgrees/sec rotation.
	// In any case, we want to measure the combination of gyro drift (from the gyro unit itself) plus the line noise
	// and determine the amount of drift compensation that we will need to apply during the match.
	// So, while the robot is sitting idle, waiting for the match to begin, we will continuously measure the
	// gyro input signal and compute the most stable center position.
	double cgr;
	CRITICAL_REGION(gyro_semaphore)		// we need to reference values that are updated outside of this procedure
		{								// and we don't want those values getting changed while we are referencing them
		cgr = GyroRawRate;
		}
	END_REGION;
		{
		Synchronized sync(gyro_semaphore);	// we are going to update values referenced by other procedure.
		if (fabs(cgr) > GYRO_NOISELIMIT)
			{
			//	The robot got moved during the calibration sequence.
			cgr = GyroCenter;
			noisycnt++;
			}
		else
			{
			GyroCenter = ((GyroCenter * 1000.0) + cgr) / 1001.0;	// adjust GyroCenter by 0.1% with each pass
			Gyro_VoltageCenter += (cgr / 100.0);					// adjust Gyro_VoltageCenter by 1% with each pass
			Calibrated_GyroVoltageCenter = Gyro_VoltageCenter;		// stops updating this when match play begins
			}
		}
		SmartDashboard::PutNumber("NoisyGyroCount",noisycnt);
	}


//  schedule this to run independently every 1 milliseconds
void NAVIGATOR :: CallCageGyro(void *controller)
	{
	NAVIGATOR *cage_gyro = (NAVIGATOR*) controller;
	cage_gyro->CageGyro();
	}



void NAVIGATOR :: CageAccelerometer()
	{
	}



// schedule this to run independently every 10 milliseconds until match play begins
void NAVIGATOR :: Cage()
	{
	CageGyro();
	CageAccelerometer();
	}

void NAVIGATOR :: Zero()
	{
	CalibrateGyro->Stop();				//	Stop the Cage scheduler;
		{
		Synchronized sync(gyro_semaphore);	// we are going to update values referenced by other procedure.
		NavTimer.Reset();					// either reset the NavTimer, or update the NavStartTime
		//NavStartTime = NavTimer.Get();	// I chose to reset the NavTimer, which keeps the math very simple
		//	GyroCenter = gc + GYRO_ZEROSHIFT;
		GyroDrift = 0;
		GyroHeading = 0;	// actually want to read from SmartDashboard 'cause we might want to start the robot facing otherwise
		NavLoopCnt = 0;
		// for (i=1; (i < 20) && (NavStartTime = NavTimer.Get()) < .001; i++);
		}
	SmartDashboard::PutNumber("GyroCenter0", GyroCenter);
//	SmartDashboard::PutNumber("GyroVoltageCenter0", Gyro_VoltageCenter);
	}


void NAVIGATOR :: UpdatePosition()
	{
	
	}


void NAVIGATOR :: UpdateHeading()
	{
	double grr, gc;
	CRITICAL_REGION(gyro_semaphore)		// we need to reference values that are updated outside of this procedure
		{								// and we don't want those values getting changed while we are referencing them
		grr = GyroRawRate;
		gc = GyroCenter;
		}
	END_REGION;
	GyroDrift += gc;
	GyroHeading += grr;
	if (fabs(grr) > GYRO_RATELIMIT)
		{
		GyroTilt = true;
		}

	if (NavLoopCnt % 10 == 0)		// update SmartDashboard every 10 loops
		{
		SmartDashboard::PutNumber("GyroCenter", gc);
		SmartDashboard::PutNumber("RawGyroRate", grr);
		SmartDashboard::PutNumber("HeadingRate", (grr - gc) * GYRO_DEGREESPERVOLT);
		SmartDashboard::PutNumber("GyroDrift", GyroDrift * GYRO_DEGREESPERVOLT);
		SmartDashboard::PutNumber("GyroHeading", GyroHeading * GYRO_DEGREESPERVOLT); // * NavElapsedTime / (double) NavLoopCnt);
		}
	}


// schedule this to run independently every 10 milliseconds
void NAVIGATOR :: Calculate()
	{
	CRITICAL_REGION(gyro_semaphore)		// we need to reference values that are updated outside of this procedure
		{								// and we don't want those values getting changed while we are referencing them
		NavElapsedTime = NavTimer.Get();
		}
	END_REGION;
	NavLoopCnt++;
	UpdateHeading();
	UpdatePosition();
		{
		Synchronized sync(INS_semaphore);	// we are going to update values referenced by other procedure.
		RobotHeading = GyroHeading * NavLoopCnt / NavElapsedTime;
		}
	if (NavLoopCnt % 10 == 0)		// update SmartDashboard every 10 loops
		{
		SmartDashboard::PutNumber("RobotHeading", (GyroHeading - GyroDrift) * GYRO_DEGREESPERVOLT); // * NavElapsedTime / (double) NavLoopCnt);
		}
	}


//  schedule this to run independently every 1 milliseconds
void NAVIGATOR :: CallCalculate(void *controller)
	{
	NAVIGATOR *ins_update = (NAVIGATOR*) controller;
	ins_update->Calculate();
	}


double NAVIGATOR :: GetRobotHeading ()
	{
	CRITICAL_REGION(INS_semaphore)		// we need to reference values that are updated outside of this procedure
		{								// and we don't want those values getting changed while we are referencing them
		return RobotHeading;
		}
	END_REGION;
	}
